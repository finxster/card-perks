{"file_contents":{"design_guidelines.md":{"content":"# CardPerks Design Guidelines\n\n## Design Approach\n**Selected Approach:** Design System with Fintech Influences\n\n**Justification:** CardPerks is a utility-focused financial management tool where clarity, trust, and efficiency are paramount. Drawing inspiration from modern fintech leaders (Stripe, Plaid, Revolut) combined with Material Design principles for component consistency.\n\n**Key Design Principles:**\n- **Clarity First:** Information hierarchy prioritizes quick scanning and decision-making\n- **Trust Signals:** Professional, secure aesthetic builds confidence in financial data\n- **Visual Distinction:** Clear differentiation between personal and household contexts\n- **Efficiency:** Streamlined workflows minimize steps to value\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode:**\n- Primary: 220 70% 50% (Trust blue for CTAs and interactive elements)\n- Secondary: 210 15% 25% (Dark slate for text and headers)\n- Household Accent: 280 60% 55% (Purple for household-specific elements)\n- Personal Accent: 140 50% 50% (Green for personal card indicators)\n- Background: 0 0% 98% (Soft white for main canvas)\n- Surface: 0 0% 100% (Pure white for cards and panels)\n- Border: 220 15% 90% (Subtle separation)\n- Success: 145 65% 45% (Approval actions)\n- Warning: 35 90% 55% (Pending/expiring perks)\n- Error: 0 70% 55% (Destructive actions)\n\n**Dark Mode:**\n- Primary: 220 80% 60% (Brighter blue for contrast)\n- Secondary: 210 15% 85% (Light text)\n- Household Accent: 280 65% 65% (Lighter purple)\n- Personal Accent: 140 55% 60% (Lighter green)\n- Background: 220 20% 10% (Deep navy background)\n- Surface: 220 18% 14% (Elevated navy for cards)\n- Border: 220 15% 25% (Visible dark borders)\n\n### B. Typography\n\n**Font Families:**\n- Primary: Inter (CDN: Google Fonts) - UI elements, body text, data\n- Accent: Sora (CDN: Google Fonts) - Headers, emphasis\n\n**Scale:**\n- Display: text-4xl (36px) font-bold - Dashboard titles\n- Heading 1: text-3xl (30px) font-semibold - Section headers\n- Heading 2: text-2xl (24px) font-semibold - Card titles\n- Heading 3: text-xl (20px) font-medium - Subsections\n- Body: text-base (16px) font-normal - Main content\n- Small: text-sm (14px) - Metadata, labels\n- Tiny: text-xs (12px) - Tags, status indicators\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 4, 8, 12, 16\n- Micro spacing: p-2, gap-2 (8px) - tight groupings\n- Standard spacing: p-4, gap-4 (16px) - component padding\n- Section spacing: p-8, gap-8 (32px) - between major sections\n- Large spacing: p-12 (48px) - hero sections, major divisions\n- XL spacing: p-16 (64px) - dashboard margins\n\n**Grid System:**\n- Container: max-w-7xl mx-auto for main content\n- Dashboard: 12-column grid (grid-cols-12)\n- Card Grid: 3-column for desktop (lg:grid-cols-3), 2 for tablet (md:grid-cols-2), 1 for mobile\n- Admin Tables: Full-width responsive tables\n\n### D. Component Library\n\n**Core UI Elements:**\n\n*Card Tiles:*\n- Elevated surface with shadow-md, rounded-xl corners\n- Network logo/icon in top-left (h-8 w-12)\n- Ownership indicator: Personal (subtle üë§ or no badge), Household (prominent üè† badge with purple background)\n- Card name in text-xl font-semibold\n- Associated perks count in text-sm text-slate-500\n- Hover: transform scale-[1.02] with shadow-lg\n\n*Buttons:*\n- Primary: Solid fill with primary color, rounded-lg, px-4 py-2\n- Secondary: Outline variant with border-2\n- Destructive: Error color for delete actions\n- Icon buttons: rounded-full p-2 for actions\n\n*Search Bar:*\n- Prominent fixed position or sticky header\n- Large input (h-14) with rounded-full or rounded-xl\n- Placeholder: \"Where are you shopping today?\"\n- Search icon left, clear button right\n- Dropdown results with shadow-xl, absolute positioning\n\n**Navigation:**\n- Top navbar: Fixed with backdrop-blur-sm, border-b\n- Logo left, user menu right\n- Main nav: Dashboard, Cards, Merchants, Household (conditional)\n- Mobile: Hamburger menu with slide-out drawer\n\n**Forms:**\n- Input fields: h-12, rounded-lg, border focus:ring-2\n- Labels: text-sm font-medium mb-2\n- Helper text: text-xs text-slate-500\n- Error states: border-red-500 with error message below\n- Success states: border-green-500 with checkmark\n\n**Data Displays:**\n- Perks List: Stacked cards with merchant logo, perk name, expiration date badge\n- Merchant Cards: Image placeholder (aspect-video), name overlay, category tag\n- Admin Tables: Striped rows (even:bg-slate-50), sticky headers, action column right\n\n**Overlays:**\n- Modals: max-w-2xl, rounded-2xl, backdrop-blur with dark overlay\n- Toasts: Fixed bottom-right, slide-in animation, auto-dismiss\n- Dropdowns: Elevated with shadow-lg, rounded-lg\n\n### E. Animations\n\n**Sparingly Used:**\n- Card hover: transform and shadow transition (200ms)\n- Page transitions: Fade in opacity (150ms)\n- Search dropdown: Slide down with fade (200ms)\n- Toast notifications: Slide in from bottom-right\n- NO scroll-triggered animations, NO complex keyframes\n\n---\n\n## Dashboard Layout\n\n**Hero/Welcome Section:**\n- Full-width background gradient (primary to secondary, subtle)\n- Centered search bar (max-w-2xl)\n- Quick stats row below: Total Cards, Active Perks, Household Members (if applicable)\n\n**Card Summary Section:**\n- Section header: \"Your Cards\" with \"Add Card\" button right-aligned\n- Grid layout: Personal cards first, then household cards (if any)\n- Visual separator between personal and household sections (border-t with label)\n\n**Suggested Perks Section:**\n- Horizontal scroll on mobile, grid on desktop\n- Perk cards with merchant image background, overlay text\n- \"View All\" link at end\n\n**Admin Dashboard Differences:**\n- Sidebar navigation: Merchants, Crowdsourcing, Public Perks, Logs\n- Main content: Tables with inline actions\n- Pending submissions: Yellow badge with count\n- Approve/Reject: Inline buttons with confirmation modal\n\n---\n\n## Images\n\n**Hero Section:** \n- Large hero image (aspect-video or h-96) showing credit cards fanned out or wallet with cards\n- Overlay with dark gradient for text legibility\n- Buttons on image should have backdrop-blur-sm background\n\n**Card Visuals:**\n- Credit card network logos (Visa, Mastercard, Amex) from CDN or local assets\n- Merchant placeholder images: Use unsplash.com API with category tags\n- Household icon: üè† or similar vector icon from Heroicons\n\n**Merchant Cards:**\n- Aspect-ratio-video thumbnail images\n- Fallback: Colored gradient based on category\n\n---\n\n## Trust & Security Patterns\n\n- Email verification: Green checkmark badge next to verified emails\n- Secure forms: Lock icon for password fields\n- Household invites: Clear \"Pending\" vs \"Active\" status with color coding\n- Admin actions: Confirmation modals with destructive action warnings\n- JWT token display: Never shown to users, only used in headers\n\n---\n\n## Responsive Breakpoints\n\n- Mobile: Full-width cards, stacked layout, bottom nav\n- Tablet (md:768px): 2-column grids, persistent top nav\n- Desktop (lg:1024px): 3-column grids, sidebar nav for admin\n- XL (xl:1280px): Max container width, increased spacing","size_bytes":7023},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CardPerks - Credit Card Rewards Discovery Platform\n\n## Overview\nCardPerks is a full-stack web application that helps users discover which credit card gives them the best perks, cashback, or rewards for specific stores or categories. Users can register their cards, track perks, share cards with household members, and contribute to a crowdsourced merchant database.\n\n## Project Architecture\n\n### Tech Stack\n- **Frontend**: React + Vite + TypeScript\n- **Backend**: Node.js + Express\n- **Database**: PostgreSQL (Neon) with Drizzle ORM\n- **Styling**: Tailwind CSS + Shadcn UI\n- **State Management**: React Query + React Context\n- **Authentication**: JWT + bcrypt\n- **Email**: Cloudflare Worker integration\n\n### Key Features\n1. **User Authentication**\n   - Email registration with verification\n   - JWT-based authentication\n   - Email verification via Cloudflare Worker\n\n2. **Card Management**\n   - Personal cards with CRUD operations\n   - Household-shared cards visible to all family members\n   - Credit card network categorization (Visa, Mastercard, Amex, etc.)\n   - Visual distinction between personal and household cards\n\n3. **Household Management**\n   - Create family households\n   - Invite members via email\n   - Share cards across household\n   - Owner-based permissions\n\n4. **Perks Tracking**\n   - Personal perks for individual cards (must be associated with a merchant)\n   - Public perks managed by admins\n   - All perks require merchant associations\n   - Expiration tracking\n\n5. **Merchant Search**\n   - Search merchants by name or category\n   - Best card recommendations based on user's cards\n   - Perk value display\n\n6. **Crowdsourcing**\n   - Users can suggest new merchants\n   - Users can suggest new perks\n   - Admin approval workflow\n\n7. **Admin Dashboard**\n   - Manage merchants (CRUD)\n   - Review crowdsourced submissions\n   - Approve/reject suggestions\n   - Create public perks\n\n8. **Mobile Navigation**\n   - Responsive hamburger menu for mobile devices (< 768px)\n   - Slide-out drawer navigation from right side\n   - Auto-closes on navigation\n   - Accessible with aria-labels\n\n## Database Schema\n\n### Tables\n- **users**: User accounts with authentication\n- **households**: Family groups\n- **household_members**: Junction table for household membership\n- **cards**: Credit cards (personal or household)\n- **perks**: Card perks (personal or public)\n- **merchants**: Merchant database\n- **crowdsourcing**: User submissions for review\n- **verification_tokens**: Email verification and invite tokens\n\n## API Endpoints\n\n### Authentication\n- `POST /api/auth/register` - Register new user\n- `POST /api/auth/login` - Login user\n- `GET /api/auth/verify/:token` - Verify email\n- `GET /api/auth/me` - Get current user\n\n### Cards\n- `GET /api/cards` - Get user's cards (personal + household)\n- `POST /api/cards` - Create new card\n- `DELETE /api/cards/:id` - Delete card\n\n### Perks\n- `GET /api/perks` - Get user's perks\n- `POST /api/perks` - Create new perk (requires merchantId)\n\n### Merchants\n- `GET /api/merchants` - Get all merchants\n- `GET /api/merchants/search?q=query` - Search merchants\n\n\n### Household\n- `GET /api/household/my` - Get user's household\n- `POST /api/household` - Create household\n- `GET /api/household/members` - Get household members\n- `POST /api/household/invite` - Invite member\n- `GET /api/household/accept/:token` - Accept invite\n\n### Crowdsourcing\n- `POST /api/crowdsourcing/merchant` - Submit merchant suggestion\n- `POST /api/crowdsourcing/perk` - Submit perk suggestion\n\n### Admin (Admin only)\n- `GET /api/admin/crowdsourcing` - Get all submissions\n- `PATCH /api/admin/crowdsourcing/:id` - Approve/reject submission\n- `GET /api/admin/merchants` - Get all merchants\n- `POST /api/admin/merchants` - Create merchant\n- `DELETE /api/admin/merchants/:id` - Delete merchant\n\n## Design System\n\n### Colors\n- **Primary**: Trust blue (220 70% 50%) for CTAs and interactive elements\n- **Household Accent**: Purple (280 60% 55%) for household-specific elements\n- **Personal Accent**: Green (140 50% 45%) for personal card indicators\n- **Background**: Soft white (0 0% 98%) for main canvas\n- **Card Surface**: Pure white (0 0% 100%)\n\n### Typography\n- **Primary Font**: Inter - UI elements, body text\n- **Accent Font**: Sora - Headers, emphasis\n\n### Components\n- Card tiles with network branding and ownership indicators\n- Responsive search bar for merchant discovery\n- Clean admin tables with inline actions\n- Beautiful empty states and loading skeletons\n\n## User Roles\n1. **Regular User**: Register cards, manage perks, join households\n2. **Household Owner**: Create household, invite members\n3. **Admin**: Manage merchants, approve crowdsourced content\n\n## Environment Variables\n- `DATABASE_URL` - PostgreSQL connection string\n- `JWT_SECRET` - JWT signing secret\n- `SESSION_SECRET` - Session secret\n\n## Cloudflare Worker Integration\nEmail endpoints:\n- `/email/verify` - Send verification email\n- `/email/invite` - Send household invitation\n- `/email/reset` - Send password reset (future)\n\nBase URL: `https://cardperks.oieusouofinx.cloudflare.com/email`\n\n## Recent Changes\n- **2025-10-04**: Complete MVP implementation with frontend, backend, and database\n  - ‚úÖ Full authentication flow with email verification (JWT + bcrypt)\n  - ‚úÖ Card management with personal/household distinction\n  - ‚úÖ Household creation and secure invitation system\n  - ‚úÖ **Security Fix**: Resolved IDOR vulnerability in household invites (email validation enforced)\n  - ‚úÖ Merchant search with best card recommendations\n  - ‚úÖ Crowdsourcing system with admin moderation workflow\n  - ‚úÖ **Feature Added**: Personal perk management - users can now add perks directly to their cards via AddPerkDialog on dashboard\n  - ‚úÖ **Schema Update**: Perks now require merchant association (merchantId is NOT NULL)\n  - ‚úÖ **UI Enhancement**: AddPerkDialog includes merchant selection dropdown with all available merchants\n  - ‚úÖ **Household Card Management**: Full CRUD operations for household cards with EditCardDialog and delete confirmation\n  - ‚úÖ **Mobile Navigation**: Responsive hamburger menu with slide-out drawer for mobile devices (< 768px)\n  - ‚úÖ **Critical Bug Fix**: Resolved card duplication issue - cards now appear exactly once in dashboard\n  - ‚úÖ **UX Enhancement**: Context-aware card creation - Dashboard creates only personal cards, Household page creates only household cards (no confusing toggle)\n  - ‚úÖ Protected routes with role-based access control\n  - ‚úÖ Dark mode support with fintech-inspired design system\n  - ‚úÖ Comprehensive testing: Auth flow, household security, mobile navigation, and card management validated\n  - ‚úÖ Navigation includes Dashboard, Household, Suggest (Crowdsource), and Admin links\n\n## Testing Status\n- ‚úÖ **Authentication Flow**: Registration ‚Üí Email Verification ‚Üí Login ‚Üí Dashboard (PASSED)\n- ‚úÖ **Household Invitation Security**: Wrong email blocked (403), correct email accepted (PASSED)\n- ‚úÖ **Mobile Navigation**: Hamburger menu, drawer behavior, and responsive breakpoints verified (PASSED)\n- ‚úÖ **Card Management**: Card creation shows exactly once, no duplicate key warnings (PASSED)\n- ‚úÖ **Context-Aware Card Creation**: Dashboard creates personal cards only, Household page creates household cards only, no toggle shown (PASSED)\n- ‚ö†Ô∏è **Email Delivery**: Cloudflare Worker DNS issue (emails not sent, but tokens work via API)\n\n## Known Issues\n1. **Email Delivery**: Cloudflare Worker domain not resolving (DNS error) - verification tokens work via direct API calls\n2. **Test Environment**: Bcrypt hash generation limitation prevents some UI test scenarios\n\n## Security Enhancements\n- Household invitation tokens validated against authenticated user email (case-insensitive)\n- Token expiration and consumption enforced\n- Duplicate household membership prevented\n- JWT tokens properly propagated in all API requests\n- Admin-only routes protected with role check\n","size_bytes":7937},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        household: {\n          DEFAULT: \"hsl(var(--household-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--household-accent-foreground) / <alpha-value>)\",\n          border: \"var(--household-accent-border)\",\n        },\n        personal: {\n          DEFAULT: \"hsl(var(--personal-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--personal-accent-foreground) / <alpha-value>)\",\n          border: \"var(--personal-accent-border)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4510},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"// Referenced from javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":532},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { randomBytes } from \"crypto\";\nimport { insertUserSchema, insertCardSchema, insertPerkSchema, insertMerchantSchema, insertHouseholdSchema, insertCrowdsourcingSchema } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"cardperks-secret-key-change-in-production\";\nconst CLOUDFLARE_EMAIL_WORKER = \"https://cardperks-email-proxy-dev.oieusouofinx.workers.dev\";\n\ninterface AuthRequest extends Request {\n  userId?: string;\n  user?: any;\n}\n\nconst authMiddleware = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers.authorization;\n  if (!authHeader?.startsWith('Bearer ')) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  const token = authHeader.substring(7);\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n    req.userId = decoded.userId;\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: 'Invalid token' });\n  }\n};\n\nconst adminMiddleware = (req: AuthRequest, res: Response, next: NextFunction) => {\n  if (req.user?.role !== 'admin') {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  next();\n};\n\nasync function sendEmail(type: string, to: string, data: any) {\n  try {\n    const response = await fetch(`${CLOUDFLARE_EMAIL_WORKER}/${type}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ to, ...data }),\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Email send failed:', error);\n    return false;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Authentication Routes\n  app.post('/api/auth/register', async (req: Request, res: Response) => {\n    try {\n      const { name, email, password } = req.body;\n      \n      if (!name || !email || !password) {\n        return res.status(400).json({ message: 'Name, email, and password are required' });\n      }\n\n      if (password.length < 8) {\n        return res.status(400).json({ message: 'Password must be at least 8 characters' });\n      }\n      \n      const existing = await storage.getUserByEmail(email);\n      if (existing) {\n        return res.status(400).json({ message: 'Email already registered' });\n      }\n\n      const passwordHash = await bcrypt.hash(password, 10);\n      const user = await storage.createUser({\n        name,\n        email,\n        passwordHash,\n        role: 'user',\n      } as any);\n\n      const token = randomBytes(32).toString('hex');\n      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);\n      \n      await storage.createVerificationToken({\n        token,\n        userId: user.id,\n        email: user.email,\n        type: 'email_verification',\n        metadata: null,\n        expiresAt,\n      });\n\n      await sendEmail('verify', email, {\n        name,\n        verificationUrl: `${req.protocol}://${req.get('host')}/verify-email?token=${token}`,\n      });\n\n      res.json({ success: true, message: 'Registration successful. Please check your email.' });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || 'Registration failed' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req: Request, res: Response) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      const valid = await bcrypt.compare(password, user.passwordHash);\n      if (!valid) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      if (!user.verified) {\n        return res.status(401).json({ message: 'Please verify your email first' });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n      \n      const { passwordHash, ...userWithoutPassword } = user;\n      res.json({ token, user: userWithoutPassword });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || 'Login failed' });\n    }\n  });\n\n  app.get('/api/auth/verify/:token', async (req: Request, res: Response) => {\n    try {\n      const { token } = req.params;\n      const verificationToken = await storage.getVerificationToken(token);\n\n      if (!verificationToken) {\n        return res.json({ success: false, message: 'Invalid verification link' });\n      }\n\n      if (new Date() > new Date(verificationToken.expiresAt)) {\n        return res.json({ success: false, message: 'Verification link expired' });\n      }\n\n      if (verificationToken.userId) {\n        await storage.updateUser(verificationToken.userId, { verified: true });\n      }\n\n      await storage.deleteVerificationToken(token);\n      res.json({ success: true, message: 'Email verified successfully' });\n    } catch (error: any) {\n      res.json({ success: false, message: error.message || 'Verification failed' });\n    }\n  });\n\n  app.get('/api/auth/me', authMiddleware, async (req: AuthRequest, res: Response) => {\n    const { passwordHash, ...userWithoutPassword } = req.user;\n    res.json(userWithoutPassword);\n  });\n\n  // Cards Routes\n  app.get('/api/cards', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const cards = await storage.getUserCards(req.userId!);\n      const cardsWithPerkCount = await Promise.all(\n        cards.map(async (card) => {\n          const perks = await storage.getCardPerks(card.id);\n          return { ...card, perkCount: perks.length };\n        })\n      );\n      res.json(cardsWithPerkCount);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/cards', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const cardData = insertCardSchema.parse(req.body);\n      const card = await storage.createCard({ ...cardData, ownerId: req.userId! });\n      res.json(card);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch('/api/cards/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const card = await storage.getCard(req.params.id);\n      if (!card || card.ownerId !== req.userId) {\n        return res.status(404).json({ message: 'Card not found' });\n      }\n      const cardData = insertCardSchema.parse(req.body);\n      const updated = await storage.updateCard(req.params.id, cardData);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/cards/:id', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const card = await storage.getCard(req.params.id);\n      if (!card || card.ownerId !== req.userId) {\n        return res.status(404).json({ message: 'Card not found' });\n      }\n      await storage.deleteCard(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Perks Routes\n  app.get('/api/perks', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const perks = await storage.getUserPerks(req.userId!);\n      res.json(perks);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/perks', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const perkData = insertPerkSchema.parse(req.body);\n      const perk = await storage.createPerk({ ...perkData, createdBy: req.userId! });\n      res.json(perk);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Merchants Routes\n  app.get('/api/merchants', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const merchants = await storage.getAllMerchants();\n      res.json(merchants);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/merchants/search', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const query = req.query.q as string;\n      if (!query || query.length < 2) {\n        return res.json([]);\n      }\n\n      const merchants = await storage.searchMerchants(query);\n      \n      const results = await Promise.all(\n        merchants.map(async (merchant) => {\n          const merchantPerks = await storage.getMerchantPerks(merchant.id);\n          const userCards = await storage.getUserCards(req.userId!);\n          \n          let bestCard = null;\n          let perkValue = null;\n          \n          for (const perk of merchantPerks) {\n            const card = userCards.find(c => c.id === perk.cardId);\n            if (card) {\n              bestCard = card;\n              perkValue = perk.value;\n              break;\n            }\n          }\n          \n          return { ...merchant, bestCard, perkValue };\n        })\n      );\n      \n      res.json(results);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Household Routes\n  app.get('/api/household/my', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const household = await storage.getUserHousehold(req.userId!);\n      res.json(household || null);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/household', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const existing = await storage.getUserHousehold(req.userId!);\n      if (existing) {\n        return res.status(400).json({ message: 'You are already in a household' });\n      }\n\n      const householdData = insertHouseholdSchema.parse(req.body);\n      const household = await storage.createHousehold({ ...householdData, ownerId: req.userId! });\n      res.json(household);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/household/members', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const household = await storage.getUserHousehold(req.userId!);\n      if (!household) {\n        return res.json([]);\n      }\n\n      const members = await storage.getHouseholdMembers(household.id);\n      const membersWithOwner = members.map(m => ({\n        ...m.user,\n        isOwner: m.user.id === household.ownerId,\n      }));\n      \n      res.json(membersWithOwner);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/household/invite', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const { email } = req.body;\n      const household = await storage.getHouseholdByOwnerId(req.userId!);\n      \n      if (!household) {\n        return res.status(400).json({ message: 'You must create a household first' });\n      }\n\n      const token = randomBytes(32).toString('hex');\n      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);\n      \n      await storage.createVerificationToken({\n        token,\n        userId: null,\n        email,\n        type: 'household_invite',\n        metadata: { householdId: household.id, householdName: household.name },\n        expiresAt,\n      });\n\n      await sendEmail('invite', email, {\n        householdName: household.name,\n        inviterName: req.user.name,\n        inviteUrl: `${req.protocol}://${req.get('host')}/accept-invite?token=${token}`,\n      });\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/household/accept/:token', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const { token } = req.params;\n      const inviteToken = await storage.getVerificationToken(token);\n\n      if (!inviteToken || inviteToken.type !== 'household_invite') {\n        return res.status(400).json({ message: 'Invalid invite link' });\n      }\n\n      if (new Date() > new Date(inviteToken.expiresAt)) {\n        await storage.deleteVerificationToken(token);\n        return res.status(400).json({ message: 'Invite link expired' });\n      }\n\n      // Critical security check: ensure authenticated user's email matches invite email\n      if (!inviteToken.email || req.user.email.toLowerCase() !== inviteToken.email.toLowerCase()) {\n        return res.status(403).json({ message: 'This invitation was sent to a different email address' });\n      }\n\n      const metadata = inviteToken.metadata as any;\n      \n      // Check if user is already in this household\n      const existingHousehold = await storage.getUserHousehold(req.userId!);\n      if (existingHousehold) {\n        if (existingHousehold.id === metadata.householdId) {\n          await storage.deleteVerificationToken(token);\n          return res.json({ success: true, householdId: metadata.householdId, message: 'Already a member' });\n        }\n        return res.status(400).json({ message: 'You are already in another household. Leave it first to join a new one.' });\n      }\n\n      await storage.addHouseholdMember(metadata.householdId, req.userId!);\n      await storage.deleteVerificationToken(token);\n\n      res.json({ success: true, householdId: metadata.householdId });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Crowdsourcing Routes\n  app.post('/api/crowdsourcing/merchant', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const data = insertCrowdsourcingSchema.parse(req.body);\n      const submission = await storage.createCrowdsourcing({\n        ...data,\n        submittedBy: req.userId!,\n        status: 'pending',\n      });\n      res.json(submission);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/crowdsourcing/perk', authMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const data = insertCrowdsourcingSchema.parse(req.body);\n      const submission = await storage.createCrowdsourcing({\n        ...data,\n        submittedBy: req.userId!,\n        status: 'pending',\n      });\n      res.json(submission);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Admin Routes\n  app.get('/api/admin/crowdsourcing', authMiddleware, adminMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const submissions = await storage.getAllCrowdsourcing();\n      const withSubmitterInfo = await Promise.all(\n        submissions.map(async (s) => {\n          const submitter = await storage.getUser(s.submittedBy);\n          return { ...s, submitterEmail: submitter?.email };\n        })\n      );\n      res.json(withSubmitterInfo);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch('/api/admin/crowdsourcing/:id', authMiddleware, adminMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const { status, note } = req.body;\n      const submission = await storage.getCrowdsourcing(req.params.id);\n      \n      if (!submission) {\n        return res.status(404).json({ message: 'Submission not found' });\n      }\n\n      if (status === 'approved' && submission.type === 'merchant') {\n        await storage.createMerchant(submission.payload as any);\n      }\n\n      const updated = await storage.updateCrowdsourcing(req.params.id, {\n        status,\n        reviewNote: note,\n        reviewedBy: req.userId,\n        reviewedAt: new Date(),\n      });\n\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/admin/merchants', authMiddleware, adminMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const merchants = await storage.getAllMerchants();\n      res.json(merchants);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/admin/merchants', authMiddleware, adminMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      const merchantData = insertMerchantSchema.parse(req.body);\n      const merchant = await storage.createMerchant(merchantData);\n      res.json(merchant);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/admin/merchants/:id', authMiddleware, adminMiddleware, async (req: AuthRequest, res: Response) => {\n    try {\n      await storage.deleteMerchant(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17067},"server/storage.ts":{"content":"// Referenced from javascript_database blueprint\nimport { db } from \"./db\";\nimport { eq, and, or, like, desc } from \"drizzle-orm\";\nimport {\n  users, households, householdMembers, cards, perks, merchants, crowdsourcing, verificationTokens,\n  type User, type InsertUser,\n  type Household, type InsertHousehold,\n  type HouseholdMember,\n  type Card, type InsertCard,\n  type Perk, type InsertPerk,\n  type Merchant, type InsertMerchant,\n  type Crowdsourcing, type InsertCrowdsourcing,\n  type VerificationToken,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Omit<InsertUser, 'password'> & { passwordHash: string }): Promise<User>;\n  updateUser(id: string, data: Partial<User>): Promise<User | undefined>;\n\n  // Households\n  getHousehold(id: string): Promise<Household | undefined>;\n  getHouseholdByOwnerId(ownerId: string): Promise<Household | undefined>;\n  createHousehold(household: InsertHousehold & { ownerId: string }): Promise<Household>;\n  getHouseholdMembers(householdId: string): Promise<(HouseholdMember & { user: User })[]>;\n  addHouseholdMember(householdId: string, userId: string): Promise<HouseholdMember>;\n  getUserHousehold(userId: string): Promise<Household | undefined>;\n\n  // Cards\n  getCard(id: string): Promise<Card | undefined>;\n  getUserCards(userId: string): Promise<Card[]>;\n  getHouseholdCards(householdId: string): Promise<Card[]>;\n  createCard(card: InsertCard & { ownerId: string }): Promise<Card>;\n  updateCard(id: string, data: Partial<Card>): Promise<Card | undefined>;\n  deleteCard(id: string): Promise<boolean>;\n\n  // Perks\n  getPerk(id: string): Promise<Perk | undefined>;\n  getUserPerks(userId: string): Promise<Perk[]>;\n  getCardPerks(cardId: string): Promise<Perk[]>;\n  getMerchantPerks(merchantId: string): Promise<Perk[]>;\n  createPerk(perk: InsertPerk & { createdBy: string }): Promise<Perk>;\n  updatePerk(id: string, data: Partial<Perk>): Promise<Perk | undefined>;\n  deletePerk(id: string): Promise<boolean>;\n\n  // Merchants\n  getMerchant(id: string): Promise<Merchant | undefined>;\n  getAllMerchants(): Promise<Merchant[]>;\n  searchMerchants(query: string): Promise<Merchant[]>;\n  createMerchant(merchant: InsertMerchant): Promise<Merchant>;\n  updateMerchant(id: string, data: Partial<Merchant>): Promise<Merchant | undefined>;\n  deleteMerchant(id: string): Promise<boolean>;\n\n  // Crowdsourcing\n  getCrowdsourcing(id: string): Promise<Crowdsourcing | undefined>;\n  getAllCrowdsourcing(): Promise<Crowdsourcing[]>;\n  getUserCrowdsourcing(userId: string): Promise<Crowdsourcing[]>;\n  createCrowdsourcing(data: InsertCrowdsourcing & { submittedBy: string }): Promise<Crowdsourcing>;\n  updateCrowdsourcing(id: string, data: Partial<Crowdsourcing>): Promise<Crowdsourcing | undefined>;\n\n  // Verification Tokens\n  createVerificationToken(data: Omit<VerificationToken, 'id' | 'createdAt'>): Promise<VerificationToken>;\n  getVerificationToken(token: string): Promise<VerificationToken | undefined>;\n  deleteVerificationToken(token: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(user: Omit<InsertUser, 'password'> & { passwordHash: string }): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User | undefined> {\n    const [updated] = await db.update(users).set(data).where(eq(users.id, id)).returning();\n    return updated || undefined;\n  }\n\n  async getHousehold(id: string): Promise<Household | undefined> {\n    const [household] = await db.select().from(households).where(eq(households.id, id));\n    return household || undefined;\n  }\n\n  async getHouseholdByOwnerId(ownerId: string): Promise<Household | undefined> {\n    const [household] = await db.select().from(households).where(eq(households.ownerId, ownerId));\n    return household || undefined;\n  }\n\n  async createHousehold(household: InsertHousehold & { ownerId: string }): Promise<Household> {\n    const [newHousehold] = await db.insert(households).values(household).returning();\n    await db.insert(householdMembers).values({\n      householdId: newHousehold.id,\n      userId: household.ownerId,\n    });\n    return newHousehold;\n  }\n\n  async getHouseholdMembers(householdId: string): Promise<(HouseholdMember & { user: User })[]> {\n    const members = await db\n      .select()\n      .from(householdMembers)\n      .leftJoin(users, eq(householdMembers.userId, users.id))\n      .where(eq(householdMembers.householdId, householdId));\n    \n    return members.map(m => ({\n      ...m.household_members,\n      user: m.users!\n    }));\n  }\n\n  async addHouseholdMember(householdId: string, userId: string): Promise<HouseholdMember> {\n    const [member] = await db.insert(householdMembers).values({\n      householdId,\n      userId,\n    }).returning();\n    return member;\n  }\n\n  async getUserHousehold(userId: string): Promise<Household | undefined> {\n    const [member] = await db\n      .select()\n      .from(householdMembers)\n      .leftJoin(households, eq(householdMembers.householdId, households.id))\n      .where(eq(householdMembers.userId, userId));\n    \n    return member?.households || undefined;\n  }\n\n  async getCard(id: string): Promise<Card | undefined> {\n    const [card] = await db.select().from(cards).where(eq(cards.id, id));\n    return card || undefined;\n  }\n\n  async getUserCards(userId: string): Promise<Card[]> {\n    const userCards = await db.select().from(cards).where(eq(cards.ownerId, userId));\n    \n    const household = await this.getUserHousehold(userId);\n    if (!household) return userCards;\n    \n    const members = await db\n      .select({ userId: householdMembers.userId })\n      .from(householdMembers)\n      .where(eq(householdMembers.householdId, household.id));\n    \n    const otherMemberIds = members\n      .map(m => m.userId)\n      .filter(id => id !== userId);\n    \n    if (otherMemberIds.length === 0) return userCards;\n    \n    const householdCards = await db\n      .select()\n      .from(cards)\n      .where(\n        and(\n          eq(cards.isHousehold, true),\n          or(...otherMemberIds.map(id => eq(cards.ownerId, id)))\n        )\n      );\n    \n    return [...userCards, ...householdCards];\n  }\n\n  async getHouseholdCards(householdId: string): Promise<Card[]> {\n    const members = await db.select().from(householdMembers).where(eq(householdMembers.householdId, householdId));\n    const memberIds = members.map(m => m.userId);\n    \n    return await db\n      .select()\n      .from(cards)\n      .where(and(\n        eq(cards.isHousehold, true),\n        or(...memberIds.map(id => eq(cards.ownerId, id)))\n      ));\n  }\n\n  async createCard(card: InsertCard & { ownerId: string }): Promise<Card> {\n    const [newCard] = await db.insert(cards).values(card).returning();\n    return newCard;\n  }\n\n  async updateCard(id: string, data: Partial<Card>): Promise<Card | undefined> {\n    const [updated] = await db.update(cards).set(data).where(eq(cards.id, id)).returning();\n    return updated || undefined;\n  }\n\n  async deleteCard(id: string): Promise<boolean> {\n    const result = await db.delete(cards).where(eq(cards.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getPerk(id: string): Promise<Perk | undefined> {\n    const [perk] = await db.select().from(perks).where(eq(perks.id, id));\n    return perk || undefined;\n  }\n\n  async getUserPerks(userId: string): Promise<Perk[]> {\n    return await db.select().from(perks).where(eq(perks.createdBy, userId));\n  }\n\n  async getCardPerks(cardId: string): Promise<Perk[]> {\n    return await db.select().from(perks).where(eq(perks.cardId, cardId));\n  }\n\n  async getMerchantPerks(merchantId: string): Promise<Perk[]> {\n    return await db.select().from(perks).where(eq(perks.merchantId, merchantId));\n  }\n\n  async createPerk(perk: InsertPerk & { createdBy: string }): Promise<Perk> {\n    const [newPerk] = await db.insert(perks).values(perk).returning();\n    return newPerk;\n  }\n\n  async updatePerk(id: string, data: Partial<Perk>): Promise<Perk | undefined> {\n    const [updated] = await db.update(perks).set(data).where(eq(perks.id, id)).returning();\n    return updated || undefined;\n  }\n\n  async deletePerk(id: string): Promise<boolean> {\n    const result = await db.delete(perks).where(eq(perks.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getMerchant(id: string): Promise<Merchant | undefined> {\n    const [merchant] = await db.select().from(merchants).where(eq(merchants.id, id));\n    return merchant || undefined;\n  }\n\n  async getAllMerchants(): Promise<Merchant[]> {\n    return await db.select().from(merchants).orderBy(desc(merchants.createdAt));\n  }\n\n  async searchMerchants(query: string): Promise<Merchant[]> {\n    return await db\n      .select()\n      .from(merchants)\n      .where(or(\n        like(merchants.name, `%${query}%`),\n        like(merchants.category, `%${query}%`)\n      ));\n  }\n\n  async createMerchant(merchant: InsertMerchant): Promise<Merchant> {\n    const [newMerchant] = await db.insert(merchants).values(merchant).returning();\n    return newMerchant;\n  }\n\n  async updateMerchant(id: string, data: Partial<Merchant>): Promise<Merchant | undefined> {\n    const [updated] = await db.update(merchants).set(data).where(eq(merchants.id, id)).returning();\n    return updated || undefined;\n  }\n\n  async deleteMerchant(id: string): Promise<boolean> {\n    const result = await db.delete(merchants).where(eq(merchants.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getCrowdsourcing(id: string): Promise<Crowdsourcing | undefined> {\n    const [item] = await db.select().from(crowdsourcing).where(eq(crowdsourcing.id, id));\n    return item || undefined;\n  }\n\n  async getAllCrowdsourcing(): Promise<Crowdsourcing[]> {\n    return await db.select().from(crowdsourcing).orderBy(desc(crowdsourcing.createdAt));\n  }\n\n  async getUserCrowdsourcing(userId: string): Promise<Crowdsourcing[]> {\n    return await db.select().from(crowdsourcing).where(eq(crowdsourcing.submittedBy, userId));\n  }\n\n  async createCrowdsourcing(data: InsertCrowdsourcing & { submittedBy: string }): Promise<Crowdsourcing> {\n    const [item] = await db.insert(crowdsourcing).values(data).returning();\n    return item;\n  }\n\n  async updateCrowdsourcing(id: string, data: Partial<Crowdsourcing>): Promise<Crowdsourcing | undefined> {\n    const [updated] = await db.update(crowdsourcing).set(data).where(eq(crowdsourcing.id, id)).returning();\n    return updated || undefined;\n  }\n\n  async createVerificationToken(data: Omit<VerificationToken, 'id' | 'createdAt'>): Promise<VerificationToken> {\n    const [token] = await db.insert(verificationTokens).values(data).returning();\n    return token;\n  }\n\n  async getVerificationToken(token: string): Promise<VerificationToken | undefined> {\n    const [item] = await db.select().from(verificationTokens).where(eq(verificationTokens.token, token));\n    return item || undefined;\n  }\n\n  async deleteVerificationToken(token: string): Promise<boolean> {\n    const result = await db.delete(verificationTokens).where(eq(verificationTokens.token, token));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11712},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer, json } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  verified: boolean(\"verified\").notNull().default(false),\n  role: text(\"role\").notNull().default(\"user\"), // user, admin\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Households table\nexport const households = pgTable(\"households\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Household members junction table\nexport const householdMembers = pgTable(\"household_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  householdId: varchar(\"household_id\").notNull().references(() => households.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  joinedAt: timestamp(\"joined_at\").notNull().defaultNow(),\n});\n\n// Cards table\nexport const cards = pgTable(\"cards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  network: text(\"network\").notNull(), // Visa, Mastercard, Amex, Discover, etc.\n  lastFourDigits: text(\"last_four_digits\"),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  isHousehold: boolean(\"is_household\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Merchants table\nexport const merchants = pgTable(\"merchants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Perks table\nexport const perks = pgTable(\"perks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  merchantId: varchar(\"merchant_id\").notNull().references(() => merchants.id, { onDelete: \"cascade\" }),\n  expirationDate: timestamp(\"expiration_date\"),\n  isPublic: boolean(\"is_public\").notNull().default(false),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  cardId: varchar(\"card_id\").references(() => cards.id, { onDelete: \"cascade\" }),\n  value: text(\"value\"), // e.g., \"5% cashback\", \"10x points\"\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Crowdsourcing submissions table\nexport const crowdsourcing = pgTable(\"crowdsourcing\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // \"merchant\" | \"perk\"\n  payload: json(\"payload\").notNull(), // Store submitted data\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected\n  submittedBy: varchar(\"submitted_by\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewNote: text(\"review_note\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n});\n\n// Verification tokens for email verification and invites\nexport const verificationTokens = pgTable(\"verification_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  token: text(\"token\").notNull().unique(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  email: text(\"email\"),\n  type: text(\"type\").notNull(), // \"email_verification\", \"household_invite\", \"password_reset\"\n  metadata: json(\"metadata\"), // Store additional data like householdId for invites\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  ownedHouseholds: many(households),\n  householdMemberships: many(householdMembers),\n  cards: many(cards),\n  perks: many(perks),\n  crowdsourcingSubmissions: many(crowdsourcing),\n}));\n\nexport const householdsRelations = relations(households, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [households.ownerId],\n    references: [users.id],\n  }),\n  members: many(householdMembers),\n}));\n\nexport const householdMembersRelations = relations(householdMembers, ({ one }) => ({\n  household: one(households, {\n    fields: [householdMembers.householdId],\n    references: [households.id],\n  }),\n  user: one(users, {\n    fields: [householdMembers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const cardsRelations = relations(cards, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [cards.ownerId],\n    references: [users.id],\n  }),\n  perks: many(perks),\n}));\n\nexport const merchantsRelations = relations(merchants, ({ many }) => ({\n  perks: many(perks),\n}));\n\nexport const perksRelations = relations(perks, ({ one }) => ({\n  merchant: one(merchants, {\n    fields: [perks.merchantId],\n    references: [merchants.id],\n  }),\n  creator: one(users, {\n    fields: [perks.createdBy],\n    references: [users.id],\n  }),\n  card: one(cards, {\n    fields: [perks.cardId],\n    references: [cards.id],\n  }),\n}));\n\nexport const crowdsourcingRelations = relations(crowdsourcing, ({ one }) => ({\n  submitter: one(users, {\n    fields: [crowdsourcing.submittedBy],\n    references: [users.id],\n  }),\n  reviewer: one(users, {\n    fields: [crowdsourcing.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  passwordHash: true,\n  verified: true,\n  role: true,\n  createdAt: true,\n}).extend({\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n});\n\nexport const insertHouseholdSchema = createInsertSchema(households).omit({\n  id: true,\n  ownerId: true,\n  createdAt: true,\n});\n\nexport const insertCardSchema = createInsertSchema(cards).omit({\n  id: true,\n  ownerId: true,\n  createdAt: true,\n});\n\nexport const insertMerchantSchema = createInsertSchema(merchants).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPerkSchema = createInsertSchema(perks).omit({\n  id: true,\n  createdBy: true,\n  createdAt: true,\n});\n\nexport const insertCrowdsourcingSchema = createInsertSchema(crowdsourcing).omit({\n  id: true,\n  submittedBy: true,\n  reviewedBy: true,\n  reviewNote: true,\n  createdAt: true,\n  reviewedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Household = typeof households.$inferSelect;\nexport type InsertHousehold = z.infer<typeof insertHouseholdSchema>;\n\nexport type HouseholdMember = typeof householdMembers.$inferSelect;\n\nexport type Card = typeof cards.$inferSelect;\nexport type InsertCard = z.infer<typeof insertCardSchema>;\n\nexport type Merchant = typeof merchants.$inferSelect;\nexport type InsertMerchant = z.infer<typeof insertMerchantSchema>;\n\nexport type Perk = typeof perks.$inferSelect;\nexport type InsertPerk = z.infer<typeof insertPerkSchema>;\n\nexport type Crowdsourcing = typeof crowdsourcing.$inferSelect;\nexport type InsertCrowdsourcing = z.infer<typeof insertCrowdsourcingSchema>;\n\nexport type VerificationToken = typeof verificationTokens.$inferSelect;\n","size_bytes":7721},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/lib/auth\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ProtectedRoute } from \"@/components/protected-route\";\nimport { AppNav } from \"@/components/app-nav\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport VerifyEmail from \"@/pages/verify-email\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Household from \"@/pages/household\";\nimport Crowdsource from \"@/pages/crowdsource\";\nimport Admin from \"@/pages/admin\";\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (location === '/') {\n      setLocation('/dashboard');\n    }\n  }, [location, setLocation]);\n\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/verify-email\" component={VerifyEmail} />\n      \n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/household\">\n        <ProtectedRoute>\n          <Household />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/crowdsource\">\n        <ProtectedRoute>\n          <Crowdsource />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/admin\">\n        <ProtectedRoute adminOnly>\n          <Admin />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <TooltipProvider>\n            <AppNav />\n            <Router />\n            <Toaster />\n          </TooltipProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2170},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 20% 15%;\n\n  --border: 220 15% 90%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 18% 18%;\n\n  --card-border: 220 12% 94%;\n\n  --sidebar: 220 10% 96%;\n\n  --sidebar-foreground: 220 18% 20%;\n\n  --sidebar-border: 220 12% 92%;\n\n  --sidebar-primary: 220 70% 50%;\n\n  --sidebar-primary-foreground: 220 10% 98%;\n\n  --sidebar-accent: 220 15% 92%;\n\n  --sidebar-accent-foreground: 220 18% 22%;\n\n  --sidebar-ring: 220 70% 50%;\n\n  --popover: 220 8% 94%;\n\n  --popover-foreground: 220 18% 18%;\n\n  --popover-border: 220 12% 88%;\n\n  --primary: 220 70% 50%;\n\n  --primary-foreground: 220 10% 98%;\n\n  --secondary: 220 12% 88%;\n\n  --secondary-foreground: 220 18% 20%;\n\n  --muted: 220 15% 92%;\n\n  --muted-foreground: 220 15% 40%;\n\n  --accent: 220 18% 90%;\n\n  --accent-foreground: 220 18% 22%;\n\n  --destructive: 0 70% 55%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  --input: 220 20% 75%;\n  --ring: 220 70% 50%;\n  --chart-1: 220 70% 50%;\n  --chart-2: 280 60% 55%;\n  --chart-3: 140 50% 45%;\n  --chart-4: 35 90% 55%;\n  --chart-5: 210 15% 30%;\n\n  --household-accent: 280 60% 55%;\n  --household-accent-foreground: 280 10% 98%;\n  --personal-accent: 140 50% 45%;\n  --personal-accent-foreground: 140 10% 98%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: 'Sora', Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', Menlo, monospace;\n  --radius: .75rem; /* 12px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 15% / 0.06), 0px 1px 2px -1px hsl(220 15% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 15% / 0.08), 0px 2px 4px -2px hsl(220 15% 15% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 15% / 0.10), 0px 3px 6px -3px hsl(220 15% 15% / 0.06);\n  --shadow-lg: 0px 10px 20px -3px hsl(220 15% 15% / 0.12), 0px 4px 8px -4px hsl(220 15% 15% / 0.08);\n  --shadow-xl: 0px 20px 30px -5px hsl(220 15% 15% / 0.14), 0px 8px 12px -6px hsl(220 15% 15% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 15% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --household-accent-border: hsl(var(--household-accent));\n  --household-accent-border: hsl(from hsl(var(--household-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --personal-accent-border: hsl(var(--personal-accent));\n  --personal-accent-border: hsl(from hsl(var(--personal-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 20% 10%;\n\n  --foreground: 220 10% 88%;\n\n  --border: 220 15% 25%;\n\n  --card: 220 18% 14%;\n\n  --card-foreground: 220 10% 85%;\n\n  --card-border: 220 15% 20%;\n\n  --sidebar: 220 16% 16%;\n\n  --sidebar-foreground: 220 10% 85%;\n\n  --sidebar-border: 220 15% 22%;\n\n  --sidebar-primary: 220 80% 60%;\n\n  --sidebar-primary-foreground: 220 10% 98%;\n\n  --sidebar-accent: 220 15% 22%;\n\n  --sidebar-accent-foreground: 220 10% 88%;\n\n  --sidebar-ring: 220 80% 60%;\n\n  --popover: 220 18% 18%;\n\n  --popover-foreground: 220 10% 88%;\n\n  --popover-border: 220 15% 24%;\n\n  --primary: 220 80% 60%;\n\n  --primary-foreground: 220 10% 98%;\n\n  --secondary: 220 15% 24%;\n\n  --secondary-foreground: 220 10% 88%;\n\n  --muted: 220 15% 20%;\n\n  --muted-foreground: 220 15% 65%;\n\n  --accent: 220 18% 22%;\n\n  --accent-foreground: 220 10% 88%;\n\n  --destructive: 0 70% 55%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  --input: 220 20% 35%;\n  --ring: 220 80% 60%;\n  --chart-1: 220 80% 65%;\n  --chart-2: 280 65% 65%;\n  --chart-3: 140 55% 60%;\n  --chart-4: 35 90% 65%;\n  --chart-5: 210 15% 75%;\n\n  --household-accent: 280 65% 65%;\n  --household-accent-foreground: 280 10% 98%;\n  --personal-accent: 140 55% 60%;\n  --personal-accent-foreground: 140 10% 98%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 20% 5% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 20% 5% / 0.35);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 20% 5% / 0.30), 0px 1px 2px -1px hsl(220 20% 5% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(220 20% 5% / 0.35), 0px 2px 4px -2px hsl(220 20% 5% / 0.30);\n  --shadow-md: 0px 6px 12px -2px hsl(220 20% 5% / 0.40), 0px 3px 6px -3px hsl(220 20% 5% / 0.35);\n  --shadow-lg: 0px 10px 20px -3px hsl(220 20% 5% / 0.45), 0px 4px 8px -4px hsl(220 20% 5% / 0.40);\n  --shadow-xl: 0px 20px 30px -5px hsl(220 20% 5% / 0.50), 0px 8px 12px -6px hsl(220 20% 5% / 0.45);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 20% 5% / 0.60);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --household-accent-border: hsl(var(--household-accent));\n  --household-accent-border: hsl(from hsl(var(--household-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --personal-accent-border: hsl(var(--personal-accent));\n  --personal-accent-border: hsl(from hsl(var(--personal-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10897},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-nav.tsx":{"content":"import { useAuth } from '@/lib/auth';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { ThemeToggle } from './theme-toggle';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/components/ui/sheet';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { CreditCard, LayoutDashboard, Home, TrendingUp, Shield, LogOut, Menu } from 'lucide-react';\nimport { useState } from 'react';\n\nexport function AppNav() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  if (!user) return null;\n\n  const navItems = [\n    { path: '/dashboard', label: 'Dashboard', icon: LayoutDashboard },\n    { path: '/household', label: 'Household', icon: Home },\n    { path: '/crowdsource', label: 'Suggest', icon: TrendingUp },\n  ];\n\n  if (user.role === 'admin') {\n    navItems.push({ path: '/admin', label: 'Admin', icon: Shield });\n  }\n\n  return (\n    <nav className=\"border-b bg-card\">\n      <div className=\"max-w-7xl mx-auto px-4 md:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center gap-8\">\n            <Link href=\"/dashboard\" className=\"flex items-center gap-2 font-bold text-lg\">\n              <CreditCard className=\"h-6 w-6 text-primary\" />\n              <span>CardPerks</span>\n            </Link>\n            \n            <div className=\"hidden md:flex items-center gap-1\">\n              {navItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.path;\n                return (\n                  <Link key={item.path} href={item.path}>\n                    <Button\n                      variant={isActive ? 'secondary' : 'ghost'}\n                      size=\"sm\"\n                      className=\"gap-2\"\n                      data-testid={`nav-${item.label.toLowerCase()}`}\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                      {item.label}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            \n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"md:hidden\"\n                  data-testid=\"button-mobile-menu\"\n                  aria-label=\"Open navigation menu\"\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[280px]\">\n                <SheetHeader>\n                  <SheetTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"h-5 w-5 text-primary\" />\n                    Navigation\n                  </SheetTitle>\n                </SheetHeader>\n                <div className=\"mt-6 flex flex-col gap-2\">\n                  {navItems.map((item) => {\n                    const Icon = item.icon;\n                    const isActive = location === item.path;\n                    return (\n                      <Link\n                        key={item.path}\n                        href={item.path}\n                        onClick={() => setMobileMenuOpen(false)}\n                      >\n                        <Button\n                          variant={isActive ? 'secondary' : 'ghost'}\n                          className=\"w-full justify-start gap-3\"\n                          data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n                        >\n                          <Icon className=\"h-5 w-5\" />\n                          {item.label}\n                        </Button>\n                      </Link>\n                    );\n                  })}\n                </div>\n              </SheetContent>\n            </Sheet>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-9 w-9 rounded-full\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"h-9 w-9\">\n                    <AvatarFallback>\n                      {user.name\n                        .split(' ')\n                        .map((n) => n[0])\n                        .join('')\n                        .toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuLabel>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium leading-none\">{user.name}</p>\n                    <p className=\"text-xs leading-none text-muted-foreground\">\n                      {user.email}\n                    </p>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={logout} data-testid=\"button-logout\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5657},"client/src/components/merchant-search.tsx":{"content":"import { useState } from 'react';\nimport { Search, MapPin, TrendingUp } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport type { Merchant, Card as CardType } from '@shared/schema';\n\ninterface MerchantSearchProps {\n  onSearch: (query: string) => void;\n  results: (Merchant & { bestCard?: CardType; perkValue?: string })[];\n  isSearching?: boolean;\n}\n\nexport function MerchantSearch({ onSearch, results, isSearching }: MerchantSearchProps) {\n  const [query, setQuery] = useState('');\n  const [, setLocation] = useLocation();\n\n  const handleSearch = (value: string) => {\n    setQuery(value);\n    if (value.length > 2) {\n      onSearch(value);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 left-0 flex items-center pl-4\">\n          <Search className=\"h-5 w-5 text-muted-foreground\" />\n        </div>\n        <Input\n          type=\"search\"\n          placeholder=\"Where are you shopping today?\"\n          value={query}\n          onChange={(e) => handleSearch(e.target.value)}\n          className=\"pl-12 h-14 text-lg rounded-xl\"\n          data-testid=\"input-merchant-search\"\n        />\n      </div>\n\n      {isSearching && (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          Searching merchants...\n        </div>\n      )}\n\n      {!isSearching && results.length > 0 && (\n        <div className=\"space-y-4\">\n          <h3 className=\"font-semibold text-lg\">Search Results</h3>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {results.map((merchant) => (\n              <Card key={merchant.id} className=\"hover-elevate active-elevate-2\" data-testid={`merchant-result-${merchant.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <CardTitle className=\"text-lg\" data-testid={`text-merchant-name-${merchant.id}`}>{merchant.name}</CardTitle>\n                    {merchant.bestCard && (\n                      <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary\">\n                        <TrendingUp className=\"h-3 w-3 mr-1\" />\n                        Best\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Badge variant=\"outline\">{merchant.category}</Badge>\n                    {merchant.address && (\n                      <div className=\"flex items-center gap-1 text-xs\">\n                        <MapPin className=\"h-3 w-3\" />\n                        <span className=\"truncate\">{merchant.address}</span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {merchant.bestCard && (\n                    <div className=\"pt-2 border-t\">\n                      <p className=\"text-sm font-medium mb-1\">Recommended Card:</p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`text-best-card-${merchant.id}`}>{merchant.bestCard.name}</p>\n                      {merchant.perkValue && (\n                        <Badge variant=\"secondary\" className=\"mt-2 bg-personal/10 text-personal\">\n                          {merchant.perkValue}\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                  \n                  {!merchant.bestCard && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      No perks available for this merchant\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {!isSearching && query.length > 2 && results.length === 0 && (\n        <Card className=\"p-8\">\n          <div className=\"text-center space-y-2\">\n            <Search className=\"h-12 w-12 mx-auto text-muted-foreground\" />\n            <h3 className=\"font-semibold\">No merchants found</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Try a different search term or suggest a new merchant\n            </p>\n            <Button \n              variant=\"outline\" \n              className=\"mt-4\" \n              onClick={() => setLocation('/crowdsource')}\n              data-testid=\"button-suggest-merchant\"\n            >\n              Suggest Merchant\n            </Button>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4817},"client/src/components/protected-route.tsx":{"content":"import { useAuth } from '@/lib/auth';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\nimport { Loader2 } from 'lucide-react';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  adminOnly?: boolean;\n}\n\nexport function ProtectedRoute({ children, adminOnly = false }: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation('/login');\n    }\n    if (!isLoading && user && adminOnly && user.role !== 'admin') {\n      setLocation('/dashboard');\n    }\n  }, [user, isLoading, setLocation, adminOnly]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  if (adminOnly && user.role !== 'admin') {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":976},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState, type ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setThemeState] = useState<Theme>('light');\n\n  useEffect(() => {\n    const stored = localStorage.getItem('theme') as Theme;\n    if (stored) {\n      setThemeState(stored);\n    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setThemeState('dark');\n    }\n  }, []);\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n  };\n\n  const toggleTheme = () => {\n    setThemeState((prev) => (prev === 'light' ? 'dark' : 'light'));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1382},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from './theme-provider';\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":548},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, type ReactNode } from 'react';\nimport { useLocation } from 'wouter';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  verified: boolean;\n  role: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  setUser: (user: User | null) => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetch('/api/auth/me', {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n        .then((res) => (res.ok ? res.json() : null))\n        .then((data) => {\n          if (data) setUser(data);\n          setIsLoading(false);\n        })\n        .catch(() => setIsLoading(false));\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const res = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!res.ok) {\n      const error = await res.json();\n      throw new Error(error.message || 'Login failed');\n    }\n\n    const data = await res.json();\n    localStorage.setItem('token', data.token);\n    setUser(data.user);\n  };\n\n  const register = async (name: string, email: string, password: string) => {\n    const res = await fetch('/api/auth/register', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name, email, password }),\n    });\n\n    if (!res.ok) {\n      const error = await res.json();\n      throw new Error(error.message || 'Registration failed');\n    }\n\n    const data = await res.json();\n    return data;\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    setLocation('/login');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, register, setUser, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2616},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('token');\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = {};\n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1672},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, XCircle, Store, TrendingUp, Clock } from 'lucide-react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const [selectedSubmission, setSelectedSubmission] = useState<any>(null);\n  const [merchantDialogOpen, setMerchantDialogOpen] = useState(false);\n  const [merchantForm, setMerchantForm] = useState({ name: '', category: '', address: '' });\n\n  const { data: submissions = [] } = useQuery({\n    queryKey: ['/api/admin/crowdsourcing'],\n  });\n\n  const { data: merchants = [] } = useQuery({\n    queryKey: ['/api/admin/merchants'],\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: ({ id, status, note }: { id: string; status: string; note?: string }) =>\n      apiRequest('PATCH', `/api/admin/crowdsourcing/${id}`, { status, note }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/crowdsourcing'] });\n      toast({\n        title: 'Submission reviewed',\n        description: 'The submission has been processed.',\n      });\n      setSelectedSubmission(null);\n    },\n  });\n\n  const addMerchantMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('POST', '/api/admin/merchants', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/merchants'] });\n      toast({\n        title: 'Merchant added',\n        description: 'New merchant has been added successfully.',\n      });\n      setMerchantDialogOpen(false);\n      setMerchantForm({ name: '', category: '', address: '' });\n    },\n  });\n\n  const deleteMerchantMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/admin/merchants/${id}`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/merchants'] });\n      toast({\n        title: 'Merchant deleted',\n        description: 'The merchant has been removed.',\n      });\n    },\n  });\n\n  const pendingSubmissions = submissions.filter((s: any) => s.status === 'pending');\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto p-4 md:p-8 space-y-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage merchants, perks, and crowdsourced submissions\n          </p>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Pending Submissions\n              </CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-pending-submissions\">\n                {pendingSubmissions.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Total Merchants\n              </CardTitle>\n              <Store className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total-merchants\">\n                {merchants.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Total Submissions\n              </CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total-submissions\">\n                {submissions.length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"crowdsourcing\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"crowdsourcing\" data-testid=\"tab-crowdsourcing\">\n              Crowdsourcing\n              {pendingSubmissions.length > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-2 bg-orange-500/10 text-orange-600\">\n                  {pendingSubmissions.length}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"merchants\" data-testid=\"tab-merchants\">Merchants</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"crowdsourcing\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Crowdsourced Submissions</CardTitle>\n                <CardDescription>\n                  Review and approve merchant or perk suggestions from users\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {submissions.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No submissions yet\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Details</TableHead>\n                        <TableHead>Submitted By</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {submissions.map((submission: any) => (\n                        <TableRow key={submission.id} data-testid={`submission-row-${submission.id}`}>\n                          <TableCell>\n                            <Badge variant=\"outline\">{submission.type}</Badge>\n                          </TableCell>\n                          <TableCell>\n                            {submission.type === 'merchant' && (\n                              <div>\n                                <p className=\"font-medium\">{submission.payload.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {submission.payload.category}\n                                </p>\n                              </div>\n                            )}\n                            {submission.type === 'perk' && (\n                              <div>\n                                <p className=\"font-medium\">{submission.payload.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {submission.payload.description}\n                                </p>\n                              </div>\n                            )}\n                          </TableCell>\n                          <TableCell>{submission.submitterEmail}</TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={\n                                submission.status === 'approved'\n                                  ? 'default'\n                                  : submission.status === 'rejected'\n                                  ? 'destructive'\n                                  : 'secondary'\n                              }\n                            >\n                              {submission.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {submission.status === 'pending' && (\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() =>\n                                    reviewMutation.mutate({\n                                      id: submission.id,\n                                      status: 'approved',\n                                    })\n                                  }\n                                  data-testid={`button-approve-${submission.id}`}\n                                >\n                                  <CheckCircle className=\"h-4 w-4 mr-1\" />\n                                  Approve\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() =>\n                                    reviewMutation.mutate({\n                                      id: submission.id,\n                                      status: 'rejected',\n                                    })\n                                  }\n                                  data-testid={`button-reject-${submission.id}`}\n                                >\n                                  <XCircle className=\"h-4 w-4 mr-1\" />\n                                  Reject\n                                </Button>\n                              </div>\n                            )}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"merchants\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Merchants</CardTitle>\n                    <CardDescription>\n                      Manage the merchant database\n                    </CardDescription>\n                  </div>\n                  <Dialog open={merchantDialogOpen} onOpenChange={setMerchantDialogOpen}>\n                    <Button onClick={() => setMerchantDialogOpen(true)} data-testid=\"button-add-merchant\">\n                      Add Merchant\n                    </Button>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Add Merchant</DialogTitle>\n                        <DialogDescription>\n                          Add a new merchant to the database\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"name\">Name</Label>\n                          <Input\n                            id=\"name\"\n                            value={merchantForm.name}\n                            onChange={(e) =>\n                              setMerchantForm({ ...merchantForm, name: e.target.value })\n                            }\n                            data-testid=\"input-merchant-name\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"category\">Category</Label>\n                          <Select\n                            value={merchantForm.category}\n                            onValueChange={(value) =>\n                              setMerchantForm({ ...merchantForm, category: value })\n                            }\n                          >\n                            <SelectTrigger data-testid=\"select-merchant-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"Grocery\">Grocery</SelectItem>\n                              <SelectItem value=\"Dining\">Dining</SelectItem>\n                              <SelectItem value=\"Gas\">Gas</SelectItem>\n                              <SelectItem value=\"Travel\">Travel</SelectItem>\n                              <SelectItem value=\"Entertainment\">Entertainment</SelectItem>\n                              <SelectItem value=\"Shopping\">Shopping</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"address\">Address (Optional)</Label>\n                          <Input\n                            id=\"address\"\n                            value={merchantForm.address}\n                            onChange={(e) =>\n                              setMerchantForm({ ...merchantForm, address: e.target.value })\n                            }\n                            data-testid=\"input-merchant-address\"\n                          />\n                        </div>\n                        <Button\n                          onClick={() => addMerchantMutation.mutate(merchantForm)}\n                          className=\"w-full\"\n                          disabled={!merchantForm.name || !merchantForm.category}\n                          data-testid=\"button-submit-merchant\"\n                        >\n                          Add Merchant\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {merchants.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No merchants yet\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Category</TableHead>\n                        <TableHead>Address</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {merchants.map((merchant: any) => (\n                        <TableRow key={merchant.id} data-testid={`merchant-row-${merchant.id}`}>\n                          <TableCell className=\"font-medium\">{merchant.name}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{merchant.category}</Badge>\n                          </TableCell>\n                          <TableCell>{merchant.address || '-'}</TableCell>\n                          <TableCell>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => deleteMerchantMutation.mutate(merchant.id)}\n                              data-testid={`button-delete-merchant-${merchant.id}`}\n                            >\n                              Delete\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16203},"client/src/pages/crowdsource.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Store, TrendingUp, CheckCircle } from 'lucide-react';\n\nconst merchantSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  category: z.string().min(1, 'Category is required'),\n  address: z.string().optional(),\n});\n\nconst perkSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  description: z.string().min(10, 'Description must be at least 10 characters'),\n  value: z.string().optional(),\n});\n\ntype MerchantForm = z.infer<typeof merchantSchema>;\ntype PerkForm = z.infer<typeof perkSchema>;\n\nexport default function Crowdsource() {\n  const { toast } = useToast();\n  const [merchantSubmitted, setMerchantSubmitted] = useState(false);\n  const [perkSubmitted, setPerkSubmitted] = useState(false);\n\n  const merchantForm = useForm<MerchantForm>({\n    resolver: zodResolver(merchantSchema),\n    defaultValues: {\n      name: '',\n      category: '',\n      address: '',\n    },\n  });\n\n  const perkForm = useForm<PerkForm>({\n    resolver: zodResolver(perkSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      value: '',\n    },\n  });\n\n  const submitMerchantMutation = useMutation({\n    mutationFn: (data: MerchantForm) =>\n      apiRequest('POST', '/api/crowdsourcing/merchant', {\n        type: 'merchant',\n        payload: data,\n      }),\n    onSuccess: () => {\n      toast({\n        title: 'Merchant submitted',\n        description: 'Your suggestion has been submitted for review.',\n      });\n      merchantForm.reset();\n      setMerchantSubmitted(true);\n    },\n  });\n\n  const submitPerkMutation = useMutation({\n    mutationFn: (data: PerkForm) =>\n      apiRequest('POST', '/api/crowdsourcing/perk', {\n        type: 'perk',\n        payload: data,\n      }),\n    onSuccess: () => {\n      toast({\n        title: 'Perk submitted',\n        description: 'Your suggestion has been submitted for review.',\n      });\n      perkForm.reset();\n      setPerkSubmitted(true);\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto p-4 md:p-8 space-y-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Suggest New Content</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Help improve CardPerks by suggesting new merchants or perks\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"merchant\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"merchant\" data-testid=\"tab-suggest-merchant\">\n              <Store className=\"h-4 w-4 mr-2\" />\n              Suggest Merchant\n            </TabsTrigger>\n            <TabsTrigger value=\"perk\" data-testid=\"tab-suggest-perk\">\n              <TrendingUp className=\"h-4 w-4 mr-2\" />\n              Suggest Perk\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"merchant\">\n            {merchantSubmitted ? (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"mx-auto bg-green-500/10 p-3 rounded-xl w-fit\">\n                      <CheckCircle className=\"h-12 w-12 text-green-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">Merchant Submitted!</h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Your suggestion has been sent to our admin team for review.\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setMerchantSubmitted(false)}\n                      data-testid=\"button-suggest-another-merchant\"\n                    >\n                      Suggest Another Merchant\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Suggest a New Merchant</CardTitle>\n                  <CardDescription>\n                    Don't see a merchant you shop at? Let us know!\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...merchantForm}>\n                    <form\n                      onSubmit={merchantForm.handleSubmit((data) =>\n                        submitMerchantMutation.mutate(data)\n                      )}\n                      className=\"space-y-4\"\n                    >\n                      <FormField\n                        control={merchantForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Merchant Name</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"e.g., Whole Foods\"\n                                {...field}\n                                data-testid=\"input-merchant-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={merchantForm.control}\n                        name=\"category\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Category</FormLabel>\n                            <Select\n                              onValueChange={field.onChange}\n                              value={field.value}\n                            >\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-merchant-category\">\n                                  <SelectValue placeholder=\"Select a category\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"Grocery\">Grocery</SelectItem>\n                                <SelectItem value=\"Dining\">Dining</SelectItem>\n                                <SelectItem value=\"Gas\">Gas</SelectItem>\n                                <SelectItem value=\"Travel\">Travel</SelectItem>\n                                <SelectItem value=\"Entertainment\">Entertainment</SelectItem>\n                                <SelectItem value=\"Shopping\">Shopping</SelectItem>\n                                <SelectItem value=\"Other\">Other</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={merchantForm.control}\n                        name=\"address\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Address (Optional)</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"123 Main St, City, State\"\n                                {...field}\n                                data-testid=\"input-merchant-address\"\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Include location if specific to a certain area\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button\n                        type=\"submit\"\n                        disabled={submitMerchantMutation.isPending}\n                        data-testid=\"button-submit-merchant\"\n                      >\n                        {submitMerchantMutation.isPending\n                          ? 'Submitting...'\n                          : 'Submit Merchant'}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"perk\">\n            {perkSubmitted ? (\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"mx-auto bg-green-500/10 p-3 rounded-xl w-fit\">\n                      <CheckCircle className=\"h-12 w-12 text-green-600\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">Perk Submitted!</h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Your suggestion has been sent to our admin team for review.\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setPerkSubmitted(false)}\n                      data-testid=\"button-suggest-another-perk\"\n                    >\n                      Suggest Another Perk\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Suggest a New Perk</CardTitle>\n                  <CardDescription>\n                    Know about a great perk that's not listed? Share it!\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...perkForm}>\n                    <form\n                      onSubmit={perkForm.handleSubmit((data) =>\n                        submitPerkMutation.mutate(data)\n                      )}\n                      className=\"space-y-4\"\n                    >\n                      <FormField\n                        control={perkForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Perk Name</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"e.g., Double points on groceries\"\n                                {...field}\n                                data-testid=\"input-perk-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={perkForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Describe the perk in detail...\"\n                                className=\"min-h-24\"\n                                {...field}\n                                data-testid=\"input-perk-description\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={perkForm.control}\n                        name=\"value\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Value (Optional)</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"e.g., 5% cashback, 2x points\"\n                                {...field}\n                                data-testid=\"input-perk-value\"\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              The cashback percentage or points multiplier\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button\n                        type=\"submit\"\n                        disabled={submitPerkMutation.isPending}\n                        data-testid=\"button-submit-perk\"\n                      >\n                        {submitPerkMutation.isPending\n                          ? 'Submitting...'\n                          : 'Submit Perk'}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13941},"client/src/pages/dashboard.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { useAuth } from '@/lib/auth';\nimport { Card as CardType, Merchant, Perk } from '@shared/schema';\nimport { CardTile } from '@/components/cards/card-tile';\nimport { AddCardDialog } from '@/components/cards/add-card-dialog';\nimport { AddPerkDialog } from '@/components/perks/add-perk-dialog';\nimport { MerchantSearch } from '@/components/merchant-search';\nimport { PerkList } from '@/components/perks/perk-list';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Home, Plus, TrendingUp } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const { data: cards = [], isLoading: cardsLoading } = useQuery<(CardType & { perkCount: number })[]>({\n    queryKey: ['/api/cards'],\n  });\n\n  const { data: perks = [], isLoading: perksLoading } = useQuery<Perk[]>({\n    queryKey: ['/api/perks'],\n  });\n\n  const { data: household } = useQuery<{ id: string; name: string }>({\n    queryKey: ['/api/household/my'],\n  });\n\n  const addCardMutation = useMutation({\n    mutationFn: (cardData: any) => apiRequest('POST', '/api/cards', cardData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cards'] });\n      toast({\n        title: 'Card added successfully',\n        description: 'Your new card has been added to your collection.',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Failed to add card',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteCardMutation = useMutation({\n    mutationFn: (cardId: string) => apiRequest('DELETE', `/api/cards/${cardId}`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cards'] });\n      toast({\n        title: 'Card deleted',\n        description: 'Your card has been removed.',\n      });\n    },\n  });\n\n  const addPerkMutation = useMutation({\n    mutationFn: (perkData: any) => apiRequest('POST', '/api/perks', perkData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/perks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/cards'] });\n      toast({\n        title: 'Perk added successfully',\n        description: 'Your new perk has been added to your card.',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Failed to add perk',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSearch = async (query: string) => {\n    setIsSearching(true);\n    try {\n      const res = await fetch(`/api/merchants/search?q=${encodeURIComponent(query)}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      const data = await res.json();\n      setSearchResults(data);\n    } catch (error) {\n      console.error('Search failed:', error);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const personalCards = cards.filter((card) => !card.isHousehold);\n  const householdCards = cards.filter((card) => card.isHousehold);\n\n  const stats = [\n    { label: 'Total Cards', value: cards.length, icon: TrendingUp },\n    { label: 'Active Perks', value: perks.length, icon: TrendingUp },\n    ...(household ? [{ label: 'Household', value: household.name, icon: Home }] : []),\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto p-4 md:p-8 space-y-8\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Welcome back, {user?.name}</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Discover the best perks for your shopping\n              </p>\n            </div>\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {stats.map((stat) => (\n              <Card key={stat.label}>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">\n                    {stat.label}\n                  </CardTitle>\n                  <stat.icon className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid={`stat-${stat.label.toLowerCase().replace(' ', '-')}`}>\n                    {stat.value}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        <MerchantSearch\n          onSearch={handleSearch}\n          results={searchResults}\n          isSearching={isSearching}\n        />\n\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-2xl font-bold\">Your Cards</h2>\n            <AddCardDialog onAdd={(data) => addCardMutation.mutateAsync(data)} isHousehold={false} />\n          </div>\n\n          {cardsLoading ? (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"h-40 animate-pulse bg-muted\" />\n              ))}\n            </div>\n          ) : cards.length === 0 ? (\n            <Card className=\"p-12\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"mx-auto bg-primary/10 p-4 rounded-xl w-fit\">\n                  <Plus className=\"h-8 w-8 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">No cards yet</h3>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Add your first credit card to start tracking perks\n                  </p>\n                </div>\n                <AddCardDialog\n                  onAdd={(data) => addCardMutation.mutateAsync(data)}\n                  isHousehold={false}\n                  trigger={\n                    <Button size=\"lg\" data-testid=\"button-add-first-card\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Your First Card\n                    </Button>\n                  }\n                />\n              </div>\n            </Card>\n          ) : (\n            <>\n              {personalCards.length > 0 && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-muted-foreground\">\n                    Personal Cards\n                  </h3>\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {personalCards.map((card) => (\n                      <CardTile\n                        key={card.id}\n                        card={card}\n                        onDelete={() => deleteCardMutation.mutate(card.id)}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {householdCards.length > 0 && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-muted-foreground flex items-center gap-2\">\n                    <Home className=\"h-5 w-5\" />\n                    Household Cards\n                  </h3>\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {householdCards.map((card) => (\n                      <CardTile key={card.id} card={card} canManage={false} />\n                    ))}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-2xl font-bold\">Your Perks</h2>\n            {cards.length > 0 && (\n              <AddPerkDialog\n                cards={cards}\n                onAdd={(data) => addPerkMutation.mutateAsync(data)}\n              />\n            )}\n          </div>\n          \n          {perksLoading ? (\n            <Card className=\"h-32 animate-pulse bg-muted\" />\n          ) : (\n            <PerkList perks={perks} showAddButton={false} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8609},"client/src/pages/household.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertHouseholdSchema, insertCardSchema, type InsertCard, type Card as CardType, type User, type Household as HouseholdType } from '@shared/schema';\nimport { z } from 'zod';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Home, Plus, Users, Mail, CreditCard } from 'lucide-react';\nimport { useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { CardTile } from '@/components/cards/card-tile';\nimport { AddCardDialog } from '@/components/cards/add-card-dialog';\nimport { EditCardDialog } from '@/components/cards/edit-card-dialog';\n\nconst inviteSchema = z.object({\n  email: z.string().email('Invalid email address'),\n});\n\ntype InviteForm = z.infer<typeof inviteSchema>;\n\nexport default function Household() {\n  const { toast } = useToast();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false);\n  const [editingCard, setEditingCard] = useState<CardType | null>(null);\n  const [deletingCardId, setDeletingCardId] = useState<string | null>(null);\n\n  const { data: household, isLoading } = useQuery<HouseholdType | null>({\n    queryKey: ['/api/household/my'],\n  });\n\n  const { data: members = [] } = useQuery<(User & { isOwner?: boolean })[]>({\n    queryKey: ['/api/household/members'],\n    enabled: !!household,\n  });\n\n  const { data: cards = [] } = useQuery<CardType[]>({\n    queryKey: ['/api/cards'],\n    enabled: !!household,\n  });\n\n  const householdCards = cards.filter(card => card.isHousehold);\n\n  const createForm = useForm<z.infer<typeof insertHouseholdSchema>>({\n    resolver: zodResolver(insertHouseholdSchema),\n    defaultValues: { name: '' },\n  });\n\n  const inviteForm = useForm<InviteForm>({\n    resolver: zodResolver(inviteSchema),\n    defaultValues: { email: '' },\n  });\n\n  const createHouseholdMutation = useMutation({\n    mutationFn: (data: z.infer<typeof insertHouseholdSchema>) =>\n      apiRequest('POST', '/api/household', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/household/my'] });\n      toast({\n        title: 'Household created',\n        description: 'Your household has been created successfully.',\n      });\n      setCreateDialogOpen(false);\n      createForm.reset();\n    },\n  });\n\n  const inviteMutation = useMutation({\n    mutationFn: (data: InviteForm) =>\n      apiRequest('POST', '/api/household/invite', data),\n    onSuccess: () => {\n      toast({\n        title: 'Invitation sent',\n        description: 'An invitation email has been sent.',\n      });\n      setInviteDialogOpen(false);\n      inviteForm.reset();\n    },\n  });\n\n  const addCardMutation = useMutation({\n    mutationFn: (data: InsertCard) =>\n      apiRequest('POST', '/api/cards', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cards'] });\n      toast({\n        title: 'Card added',\n        description: 'Your household card has been added successfully.',\n      });\n    },\n  });\n\n  const updateCardMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: InsertCard }) =>\n      apiRequest('PATCH', `/api/cards/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cards'] });\n      toast({\n        title: 'Card updated',\n        description: 'Your card has been updated successfully.',\n      });\n      setEditingCard(null);\n    },\n  });\n\n  const deleteCardMutation = useMutation({\n    mutationFn: (cardId: string) =>\n      apiRequest('DELETE', `/api/cards/${cardId}`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cards'] });\n      toast({\n        title: 'Card deleted',\n        description: 'Your card has been removed.',\n      });\n      setDeletingCardId(null);\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card className=\"animate-pulse h-64 bg-muted\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!household) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-3 text-center\">\n            <div className=\"mx-auto bg-household/10 p-3 rounded-xl w-fit\">\n              <Home className=\"h-8 w-8 text-household\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Create a Household</CardTitle>\n            <CardDescription>\n              Share credit cards and perks with your family members\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"w-full\" size=\"lg\" data-testid=\"button-create-household\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Household\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create Household</DialogTitle>\n                  <DialogDescription>\n                    Give your household a name to get started\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...createForm}>\n                  <form\n                    onSubmit={createForm.handleSubmit((data) =>\n                      createHouseholdMutation.mutate(data)\n                    )}\n                    className=\"space-y-4\"\n                  >\n                    <FormField\n                      control={createForm.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Household Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., Smith Family\"\n                              {...field}\n                              data-testid=\"input-household-name\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex gap-2 justify-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setCreateDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createHouseholdMutation.isPending}\n                        data-testid=\"button-submit-household\"\n                      >\n                        {createHouseholdMutation.isPending\n                          ? 'Creating...'\n                          : 'Create'}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-4xl mx-auto p-4 md:p-8 space-y-8\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n                <Home className=\"h-8 w-8 text-household\" />\n                {household.name}\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage your household and invite members\n              </p>\n            </div>\n            <Dialog open={inviteDialogOpen} onOpenChange={setInviteDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-invite-member\">\n                  <Mail className=\"h-4 w-4 mr-2\" />\n                  Invite Member\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Invite Household Member</DialogTitle>\n                  <DialogDescription>\n                    Send an invitation email to add a new member\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...inviteForm}>\n                  <form\n                    onSubmit={inviteForm.handleSubmit((data) =>\n                      inviteMutation.mutate(data)\n                    )}\n                    className=\"space-y-4\"\n                  >\n                    <FormField\n                      control={inviteForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"member@example.com\"\n                              {...field}\n                              data-testid=\"input-invite-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex gap-2 justify-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setInviteDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={inviteMutation.isPending}\n                        data-testid=\"button-send-invite\"\n                      >\n                        {inviteMutation.isPending ? 'Sending...' : 'Send Invite'}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-4\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                Household Cards\n              </CardTitle>\n              <CardDescription className=\"mt-1\">\n                {householdCards.length} {householdCards.length === 1 ? 'card' : 'cards'} shared with household\n              </CardDescription>\n            </div>\n            <AddCardDialog\n              onAdd={(data) => addCardMutation.mutateAsync(data)}\n              isHousehold={true}\n              trigger={\n                <Button size=\"sm\" data-testid=\"button-add-household-card\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Card\n                </Button>\n              }\n            />\n          </CardHeader>\n          <CardContent>\n            {householdCards.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No household cards yet. Add a card to get started!\n              </div>\n            ) : (\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {householdCards.map((card) => (\n                  <CardTile\n                    key={card.id}\n                    card={card}\n                    onEdit={() => setEditingCard(card)}\n                    onDelete={() => setDeletingCardId(card.id)}\n                    canManage={true}\n                  />\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Household Members\n            </CardTitle>\n            <CardDescription>\n              {members.length} {members.length === 1 ? 'member' : 'members'} in your household\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {members.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No members yet. Invite someone to get started!\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {members.map((member) => (\n                  <div\n                    key={member.id}\n                    className=\"flex items-center justify-between p-3 rounded-lg hover-elevate\"\n                    data-testid={`member-item-${member.id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar>\n                        <AvatarFallback>\n                          {member.name\n                            .split(' ')\n                            .map((n: string) => n[0])\n                            .join('')\n                            .toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium\" data-testid={`text-member-name-${member.id}`}>{member.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {member.email}\n                        </p>\n                      </div>\n                    </div>\n                    {member.isOwner && (\n                      <Badge variant=\"secondary\">Owner</Badge>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <EditCardDialog\n          card={editingCard}\n          open={!!editingCard}\n          onOpenChange={(open) => !open && setEditingCard(null)}\n          onUpdate={(id, data) => updateCardMutation.mutateAsync({ id, data })}\n        />\n\n        <AlertDialog open={!!deletingCardId} onOpenChange={(open) => !open && setDeletingCardId(null)}>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete Card</AlertDialogTitle>\n              <AlertDialogDescription>\n                Are you sure you want to delete this card? This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={() => deletingCardId && deleteCardMutation.mutate(deletingCardId)}\n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                data-testid=\"button-confirm-delete\"\n              >\n                Delete\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15970},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { CreditCard } from 'lucide-react';\n\nconst loginSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(1, 'Password is required'),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    try {\n      await login(data.email, data.password);\n      toast({\n        title: 'Welcome back!',\n        description: 'Successfully logged in.',\n      });\n      setLocation('/dashboard');\n    } catch (error) {\n      toast({\n        title: 'Login failed',\n        description: error instanceof Error ? error.message : 'Invalid credentials',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-household/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-3 text-center\">\n          <div className=\"mx-auto bg-primary/10 p-3 rounded-xl w-fit\">\n            <CreditCard className=\"h-8 w-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Welcome to CardPerks</CardTitle>\n          <CardDescription>\n            Sign in to discover the best credit card perks\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"you@example.com\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? 'Signing in...' : 'Sign In'}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center text-sm\">\n            <p className=\"text-muted-foreground\">\n              Don't have an account?{' '}\n              <Link href=\"/register\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-register\">\n                Sign up\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4377},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/register.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { CreditCard, Mail } from 'lucide-react';\n\nconst registerSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { register: registerUser } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [emailSent, setEmailSent] = useState(false);\n\n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (data: RegisterForm) => {\n    setIsLoading(true);\n    try {\n      await registerUser(data.name, data.email, data.password);\n      setEmailSent(true);\n      toast({\n        title: 'Registration successful!',\n        description: 'Please check your email to verify your account.',\n      });\n    } catch (error) {\n      toast({\n        title: 'Registration failed',\n        description: error instanceof Error ? error.message : 'Something went wrong',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (emailSent) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-household/5 p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-3 text-center\">\n            <div className=\"mx-auto bg-primary/10 p-3 rounded-xl w-fit\">\n              <Mail className=\"h-8 w-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Check Your Email</CardTitle>\n            <CardDescription>\n              We've sent a verification link to your email address. Please click the link to verify your account and complete registration.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setLocation('/login')}\n              data-testid=\"button-goto-login\"\n            >\n              Go to Login\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-household/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-3 text-center\">\n          <div className=\"mx-auto bg-primary/10 p-3 rounded-xl w-fit\">\n            <CreditCard className=\"h-8 w-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Create Your Account</CardTitle>\n          <CardDescription>\n            Start discovering the best credit card perks today\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"John Doe\"\n                        {...field}\n                        data-testid=\"input-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"you@example.com\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-register\"\n              >\n                {isLoading ? 'Creating account...' : 'Create Account'}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center text-sm\">\n            <p className=\"text-muted-foreground\">\n              Already have an account?{' '}\n              <Link href=\"/login\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-login\">\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6274},"client/src/pages/verify-email.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { CheckCircle, XCircle, Loader2 } from 'lucide-react';\n\nexport default function VerifyEmail() {\n  const [, setLocation] = useLocation();\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const token = params.get('token');\n\n    if (!token) {\n      setStatus('error');\n      setMessage('Invalid verification link');\n      return;\n    }\n\n    fetch(`/api/auth/verify/${token}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.success) {\n          setStatus('success');\n          setMessage('Your email has been verified successfully!');\n        } else {\n          setStatus('error');\n          setMessage(data.message || 'Verification failed');\n        }\n      })\n      .catch(() => {\n        setStatus('error');\n        setMessage('Verification failed. Please try again.');\n      });\n  }, []);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-household/5 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-3 text-center\">\n          {status === 'loading' && (\n            <div className=\"mx-auto bg-primary/10 p-3 rounded-xl w-fit\">\n              <Loader2 className=\"h-8 w-8 text-primary animate-spin\" />\n            </div>\n          )}\n          {status === 'success' && (\n            <div className=\"mx-auto bg-green-500/10 p-3 rounded-xl w-fit\">\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            </div>\n          )}\n          {status === 'error' && (\n            <div className=\"mx-auto bg-destructive/10 p-3 rounded-xl w-fit\">\n              <XCircle className=\"h-8 w-8 text-destructive\" />\n            </div>\n          )}\n          <CardTitle className=\"text-2xl font-bold\">\n            {status === 'loading' && 'Verifying Email'}\n            {status === 'success' && 'Email Verified'}\n            {status === 'error' && 'Verification Failed'}\n          </CardTitle>\n          <CardDescription>{message}</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {status === 'success' && (\n            <Button\n              className=\"w-full\"\n              onClick={() => setLocation('/login')}\n              data-testid=\"button-goto-login\"\n            >\n              Go to Login\n            </Button>\n          )}\n          {status === 'error' && (\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => setLocation('/register')}\n              data-testid=\"button-goto-register\"\n            >\n              Back to Register\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3062},"client/src/components/cards/add-card-dialog.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertCardSchema, type InsertCard } from '@shared/schema';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Plus } from 'lucide-react';\n\ninterface AddCardDialogProps {\n  onAdd: (card: InsertCard) => Promise<any>;\n  trigger?: React.ReactNode;\n  isHousehold?: boolean;\n}\n\nconst networks = [\n  'Visa',\n  'Mastercard',\n  'American Express',\n  'Discover',\n  'Chase',\n  'Capital One',\n  'Other',\n];\n\nexport function AddCardDialog({ onAdd, trigger, isHousehold }: AddCardDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<InsertCard>({\n    resolver: zodResolver(insertCardSchema),\n    defaultValues: {\n      name: '',\n      network: '',\n      lastFourDigits: '',\n      isHousehold: isHousehold ?? false,\n    },\n  });\n\n  const handleSubmit = async (data: InsertCard) => {\n    setIsSubmitting(true);\n    try {\n      await onAdd(data);\n      form.reset();\n      setOpen(false);\n    } catch (error) {\n      console.error('Failed to add card:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button data-testid=\"button-add-card\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Card\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            {isHousehold === true ? 'Add Household Card' : isHousehold === false ? 'Add Personal Card' : 'Add Credit Card'}\n          </DialogTitle>\n          <DialogDescription>\n            {isHousehold === true \n              ? 'Add a card that will be shared with all household members.'\n              : isHousehold === false\n              ? 'Add a personal card to track your perks and rewards.'\n              : 'Add a new credit card to track your perks and rewards.'}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Card Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., Chase Sapphire Preferred\" {...field} data-testid=\"input-card-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"network\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Network</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-network\">\n                        <SelectValue placeholder=\"Select network\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {networks.map((network) => (\n                        <SelectItem key={network} value={network}>\n                          {network}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"lastFourDigits\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Last 4 Digits (Optional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"1234\"\n                      maxLength={4}\n                      {...field}\n                      value={field.value || ''}\n                      data-testid=\"input-last-four\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {isHousehold === undefined && (\n              <FormField\n                control={form.control}\n                name=\"isHousehold\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Household Card</FormLabel>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Share this card with your household members\n                      </p>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-household\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <div className=\"flex gap-2 justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                data-testid=\"button-cancel-card\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting} data-testid=\"button-submit-card\">\n                {isSubmitting ? 'Adding...' : 'Add Card'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6325},"client/src/components/cards/card-tile.tsx":{"content":"import { Card as CardType } from '@shared/schema';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Home, CreditCard, MoreVertical } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\ninterface CardTileProps {\n  card: CardType & { perkCount?: number };\n  onEdit?: () => void;\n  onDelete?: () => void;\n  canManage?: boolean;\n}\n\nexport function CardTile({ card, onEdit, onDelete, canManage = true }: CardTileProps) {\n  const networkColors: Record<string, string> = {\n    Visa: 'bg-blue-600',\n    Mastercard: 'bg-orange-600',\n    'American Express': 'bg-green-600',\n    Amex: 'bg-green-600',\n    Discover: 'bg-orange-500',\n    'Chase': 'bg-blue-700',\n  };\n\n  const bgColor = networkColors[card.network] || 'bg-primary';\n\n  return (\n    <Card className=\"group relative overflow-hidden hover-elevate active-elevate-2 transition-all\" data-testid={`card-tile-${card.id}`}>\n      <div className={`absolute inset-0 ${bgColor} opacity-5`} />\n      \n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center gap-2\">\n            <div className={`${bgColor} p-2 rounded-lg`}>\n              <CreditCard className=\"h-4 w-4 text-white\" />\n            </div>\n            {card.isHousehold && (\n              <Badge variant=\"secondary\" className=\"bg-household text-household-foreground\" data-testid={`badge-household-${card.id}`}>\n                <Home className=\"h-3 w-3 mr-1\" />\n                Household\n              </Badge>\n            )}\n          </div>\n          \n          {canManage && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity\" data-testid={`button-card-menu-${card.id}`}>\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={onEdit} data-testid={`button-edit-card-${card.id}`}>\n                  Edit Card\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={onDelete} className=\"text-destructive\" data-testid={`button-delete-card-${card.id}`}>\n                  Delete Card\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n\n        <div className=\"space-y-1\">\n          <h3 className=\"font-semibold text-lg\" data-testid={`text-card-name-${card.id}`}>{card.name}</h3>\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">{card.network}</p>\n            {card.lastFourDigits && (\n              <p className=\"text-sm text-muted-foreground\">‚Ä¢‚Ä¢‚Ä¢‚Ä¢ {card.lastFourDigits}</p>\n            )}\n          </div>\n          {card.perkCount !== undefined && (\n            <p className=\"text-xs text-muted-foreground mt-2\" data-testid={`text-perk-count-${card.id}`}>\n              {card.perkCount} {card.perkCount === 1 ? 'perk' : 'perks'} attached\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3406},"client/src/components/perks/perk-list.tsx":{"content":"import { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Calendar, TrendingUp, Plus } from 'lucide-react';\nimport type { Perk, Merchant } from '@shared/schema';\nimport { format, isPast, differenceInDays } from 'date-fns';\n\ninterface PerkWithMerchant extends Perk {\n  merchant?: Merchant;\n}\n\ninterface PerkListProps {\n  perks: PerkWithMerchant[];\n  onAdd?: () => void;\n  showAddButton?: boolean;\n}\n\nexport function PerkList({ perks, onAdd, showAddButton = true }: PerkListProps) {\n  const getPerkStatus = (perk: Perk) => {\n    if (!perk.expirationDate) return null;\n    const expDate = new Date(perk.expirationDate);\n    if (isPast(expDate)) return 'expired';\n    const daysLeft = differenceInDays(expDate, new Date());\n    if (daysLeft <= 7) return 'expiring';\n    return 'active';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-semibold text-lg\">Your Perks</h3>\n        {showAddButton && onAdd && (\n          <Button onClick={onAdd} size=\"sm\" data-testid=\"button-add-perk\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Perk\n          </Button>\n        )}\n      </div>\n\n      {perks.length === 0 ? (\n        <Card className=\"p-8\">\n          <div className=\"text-center space-y-2\">\n            <TrendingUp className=\"h-12 w-12 mx-auto text-muted-foreground\" />\n            <h3 className=\"font-semibold\">No perks yet</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Add perks to your cards to start tracking rewards\n            </p>\n          </div>\n        </Card>\n      ) : (\n        <div className=\"space-y-3\">\n          {perks.map((perk) => {\n            const status = getPerkStatus(perk);\n            return (\n              <Card key={perk.id} className=\"hover-elevate\" data-testid={`perk-item-${perk.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-base\" data-testid={`text-perk-name-${perk.id}`}>\n                        {perk.name}\n                      </CardTitle>\n                      {perk.merchant && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          {perk.merchant.name}\n                        </p>\n                      )}\n                    </div>\n                    {perk.value && (\n                      <Badge variant=\"secondary\" className=\"bg-personal/10 text-personal\">\n                        {perk.value}\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">{perk.description}</p>\n                  \n                  {perk.expirationDate && (\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-muted-foreground\">\n                        Expires {format(new Date(perk.expirationDate), 'MMM d, yyyy')}\n                      </span>\n                      {status === 'expiring' && (\n                        <Badge variant=\"outline\" className=\"border-orange-500 text-orange-600\">\n                          Expiring Soon\n                        </Badge>\n                      )}\n                      {status === 'expired' && (\n                        <Badge variant=\"outline\" className=\"border-destructive text-destructive\">\n                          Expired\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4011},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/perks/add-perk-dialog.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertPerkSchema, type InsertPerk, type Card, type Merchant } from '@shared/schema';\nimport { z } from 'zod';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Plus } from 'lucide-react';\n\ninterface AddPerkDialogProps {\n  cards: Card[];\n  onAdd: (perk: InsertPerk) => Promise<any>;\n  trigger?: React.ReactNode;\n}\n\nconst perkFormSchema = insertPerkSchema.extend({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  description: z.string().min(10, 'Description must be at least 10 characters'),\n  cardId: z.string().min(1, 'Please select a card'),\n  merchantId: z.string().min(1, 'Please select a merchant'),\n});\n\ntype PerkFormData = z.infer<typeof perkFormSchema>;\n\nexport function AddPerkDialog({ cards, onAdd, trigger }: AddPerkDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { data: merchants = [], isLoading: merchantsLoading } = useQuery<Merchant[]>({\n    queryKey: ['/api/merchants'],\n    enabled: open,\n  });\n\n  const form = useForm<PerkFormData>({\n    resolver: zodResolver(perkFormSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      cardId: '',\n      value: '',\n      merchantId: '',\n      expirationDate: undefined,\n      isPublic: false,\n    },\n  });\n\n  const handleSubmit = async (data: PerkFormData) => {\n    setIsSubmitting(true);\n    try {\n      const perkData: InsertPerk = {\n        ...data,\n        expirationDate: data.expirationDate ? new Date(data.expirationDate) : undefined,\n      };\n      await onAdd(perkData);\n      form.reset();\n      setOpen(false);\n    } catch (error) {\n      console.error('Failed to add perk:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button size=\"sm\" data-testid=\"button-add-perk\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Perk\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add Personal Perk</DialogTitle>\n          <DialogDescription>\n            Add a perk or reward to one of your cards.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"cardId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Card</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-card\">\n                        <SelectValue placeholder=\"Select a card\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {cards.map((card) => (\n                        <SelectItem \n                          key={card.id} \n                          value={card.id}\n                          data-testid={`select-card-option-${card.id}`}\n                        >\n                          {card.name} ({card.network})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"merchantId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Merchant</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value} disabled={merchantsLoading}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-merchant\">\n                        <SelectValue placeholder={merchantsLoading ? \"Loading merchants...\" : \"Select a merchant\"} />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {merchants.map((merchant) => (\n                        <SelectItem \n                          key={merchant.id} \n                          value={merchant.id}\n                          data-testid={`select-merchant-option-${merchant.id}`}\n                        >\n                          {merchant.name} - {merchant.category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormDescription>\n                    The store or merchant where this perk applies\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Perk Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"e.g., 5% Cashback on Groceries\" \n                      {...field} \n                      data-testid=\"input-perk-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Describe the perk details...\"\n                      rows={3}\n                      {...field} \n                      data-testid=\"input-perk-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"value\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Value (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"e.g., 5% cashback, 10x points\" \n                      {...field}\n                      value={field.value || ''}\n                      data-testid=\"input-perk-value\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The reward value or rate\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"expirationDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Expiration Date (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field}\n                      value={field.value ? new Date(field.value).toISOString().split('T')[0] : ''}\n                      data-testid=\"input-perk-expiration\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                disabled={isSubmitting}\n                data-testid=\"button-cancel-perk\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n                data-testid=\"button-submit-perk\"\n              >\n                {isSubmitting ? 'Adding...' : 'Add Perk'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8834},"client/src/components/cards/edit-card-dialog.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertCardSchema, type InsertCard, type Card } from '@shared/schema';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\n\ninterface EditCardDialogProps {\n  card: Card | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onUpdate: (cardId: string, data: InsertCard) => Promise<any>;\n}\n\nconst networks = [\n  'Visa',\n  'Mastercard',\n  'American Express',\n  'Discover',\n  'Chase',\n  'Capital One',\n  'Other',\n];\n\nexport function EditCardDialog({ card, open, onOpenChange, onUpdate }: EditCardDialogProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<InsertCard>({\n    resolver: zodResolver(insertCardSchema),\n    defaultValues: {\n      name: '',\n      network: '',\n      lastFourDigits: '',\n      isHousehold: false,\n    },\n  });\n\n  useEffect(() => {\n    if (card) {\n      form.reset({\n        name: card.name,\n        network: card.network,\n        lastFourDigits: card.lastFourDigits || '',\n        isHousehold: card.isHousehold,\n      });\n    }\n  }, [card, form]);\n\n  const handleSubmit = async (data: InsertCard) => {\n    if (!card) return;\n    \n    setIsSubmitting(true);\n    try {\n      await onUpdate(card.id, data);\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Failed to update card:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Edit Credit Card</DialogTitle>\n          <DialogDescription>\n            Update your credit card information.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Card Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., Chase Sapphire Preferred\" {...field} data-testid=\"input-edit-card-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"network\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Network</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-edit-network\">\n                        <SelectValue placeholder=\"Select network\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {networks.map((network) => (\n                        <SelectItem key={network} value={network}>\n                          {network}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"lastFourDigits\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Last 4 Digits (Optional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"1234\"\n                      maxLength={4}\n                      {...field}\n                      value={field.value || ''}\n                      data-testid=\"input-edit-last-four\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"isHousehold\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center justify-between rounded-lg border p-4\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"text-base\">Household Card</FormLabel>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Share this card with your household members\n                    </p>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-edit-household\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2 justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-edit-card\"\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting} data-testid=\"button-submit-edit-card\">\n                {isSubmitting ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5911}},"version":1}